#!/usr/bin/env python

import argparse
import sys
import gzip
import os
import xxhash
import time
import math

class HashXX32(object):
    """
        Class to hash the ngrams. They are seeded sequentially for consistency.
    """
    def __init__(self, seed : int, max_hash_value : int):
        self.h = xxhash.xxh32(seed=seed)
        self.max_hash_value = max_hash_value

    def hash(self, o : str):
        """
            Hashes input string and offsets value based on offset (reserved space in the embedding space)
        """
        self.h.reset()
        self.h.update(o)
        
        hash_value = self.h.intdigest() % self.max_hash_value
        return str(hash_value)



if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--outdir', type=str)
    parser.add_argument('--count_path')
    parser.add_argument('--prefix_length', type=int, default=6)

    args = parser.parse_args()

    hasher = HashXX32(seed=14, max_hash_value=int(math.pow(10, args.prefix_length)))

    count = 0
    last_prefix = ""
    open_files = None
    os.makedirs(args.outdir, exist_ok=True)
    start = time.time()
    with open(args.count_path) as infile:
        for line in infile:
            count += 1
            if count % 100000 == 0:
                print(f"{freq}\t{count}\t{time.time()-start}")
                start = time.time()
            line = line.strip().split('\t')
            freq = line[0].split()[0]
            if freq == "1":
                print("Everything below this is 1. Exiting")
                exit(0)
            src = "".join(line[0].split()[1:]).strip()
            try:
                tgt = line[1].strip()
            except:
                print(line)
                continue
            src = src.replace(" ", "")
            tgt = tgt.replace(" ", "")

            prefix = hasher.hash(f"{src} {tgt}").zfill(args.prefix_length)

            file_path = os.path.join(args.outdir, f"{prefix[0]}{prefix[1]}/{prefix[2]}{prefix[3]}")
            os.makedirs(file_path, exist_ok=True)

            outpath = os.path.join(file_path, f"{prefix[4:]}.gz")

            with gzip.open(outpath, 'a+') as outfile:
                outfile.write(bytes(f"{freq}\t{src} {tgt}\n", "utf-8"))
